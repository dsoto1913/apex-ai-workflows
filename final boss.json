{
  "name": "Apex AI Sales Agent â€“ Optimized 43-Node Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "twilio-voice",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Twilio Voice Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        100,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { twiml: `<Response><Say voice=\\\"Polly.Matthew\\\">Oh, hi there! I'm Alex from Apex AI Solutions, um, how can I assist you today?</Say><Record action=\\\"https://apex-ai-n8n.onrender.com/webhook/recording/inbound\\\" maxLength=\\\"30\\\" /></Response>`, headers: { \\\"Content-Type\\\": \\\"application/xml\\\" }, statusCode: 200 } }];"
      },
      "name": "Initial Greeting",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        300,
        200
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "recording/inbound",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Inbound Recording Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        500,
        200
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "recording/outbound",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Outbound Recording Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        500,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "const payload = $input.first().json; return [{ json: { CallSid: payload.CallSid, From: payload.From, To: payload.To, recordingUrl: payload.RecordingUrl } }];"
      },
      "name": "Inspect Twilio Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        700,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "sheet",
        "operation": "get",
        "spreadsheetId": "1tmdUg32Qv-fC-SV8D5HmqUsX6KTaS3xuL9n7pB8FqCs",
        "range": "Contacts!A2:D",
        "options": {}
      },
      "name": "Fetch Customer Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        900,
        200
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{your-google-sheets-credential-id}}",
          "name": "Google Sheets Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "call_history_{{ $json['From'] }}",
        "options": {}
      },
      "name": "Check Call History",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1100,
        200
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "key": "prompts",
        "options": {}
      },
      "name": "Fetch Prompts",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1300,
        200
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const transcript = $json.transcript?.toLowerCase() || ''; const bank = $json.Prompts || []; const match = bank.find(resp => resp.text.toLowerCase().split(/\\W+/).some(w => transcript.includes(w))); if (match) { return [{ json: { useGPT: false, responseText: match.text } }]; } else { return [{ json: { useGPT: true } }]; }"
      },
      "name": "Check for Existing Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1500,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "{{$json['useGPT']}}",
              "operation": "equal",
              "value2": true
            }
          ]
        }
      },
      "name": "Use GPT?",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        1700,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { twiml: `<Response><Say voice=\\\"Polly.Matthew\\\">${$json.responseText}</Say><Record action=\\\"https://apex-ai-n8n.onrender.com/webhook/recording/inbound\\\" maxLength=\\\"30\\\" /></Response>`, headers: { \\\"Content-Type\\\": \\\"application/xml\\\" }, statusCode: 200 } }];"
      },
      "name": "Static Playback",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const url = $input.first().json.recordingUrl; if (!url) { throw new Error('Missing recording URL'); } return [{ json: { recordingUrl: url } }];"
      },
      "name": "Validate Recording",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1900,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://api.deepgram.com/v1/listen",
        "method": "POST",
        "headers": {
          "Authorization": "Token {{your-deepgram-api-key}}",
          "Content-Type": "application/json"
        },
        "body": {
          "url": "{{ $json['recordingUrl'] }}"
        },
        "queryParameters": {
          "model": "nova-2",
          "smart_format": true,
          "filler_words": true
        },
        "options": {}
      },
      "name": "Deepgram Transcription",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2100,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json; const transcript = response.results?.channels[0]?.alternatives[0]?.transcript || ''; return [{ json: { transcript } }];"
      },
      "name": "Parse Deepgram",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2300,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "openAiApi",
        "operation": "chat",
        "model": "gpt-4o",
        "messages": [
          {
            "role": "system",
            "content": "For the transcript: {{ $json['transcript'] }}, do the following: 1. Analyze sentiment (return 'positive', 'neutral', or 'negative'). 2. Classify intent (return 'continue', 'end', 'transfer', or 'schedule'). 3. Generate a human-like response with fillers like 'um', 'oh', 'yeah', considering objection: {{ $json['isObjection'] }} and customer: {{ $json['CustomerName'] || 'there' }}. Return JSON: { Sentiment: string, intent: string, ResponseText: string }"
          }
        ],
        "options": {}
      },
      "name": "Generate Combined Response",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        2500,
        200
      ],
      "credentials": {
        "openAiApi": {
          "id": "{{your-openai-credential-id}}",
          "name": "OpenAI Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const content = $input.first().json.choices[0].message.content; const parsed = JSON.parse(content); return [{ json: { Sentiment: parsed.Sentiment, intent: parsed.intent, ResponseText: parsed.ResponseText } }];"
      },
      "name": "Parse AI Outputs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2700,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{$json['intent']}}",
              "operation": "equal",
              "value2": "end"
            },
            {
              "value1": "{{$json['intent']}}",
              "operation": "equal",
              "value2": "transfer"
            },
            {
              "value1": "{{$json['intent']}}",
              "operation": "equal",
              "value2": "schedule"
            },
            {
              "value1": "{{$json['intent']}}",
              "operation": "equal",
              "value2": "continue"
            }
          ]
        },
        "defaultOutput": 3
      },
      "name": "Route by Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        2900,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "twilioApi",
        "operation": "update",
        "callSid": "{{ $json['CallSid'] }}",
        "status": "completed",
        "options": {}
      },
      "name": "End Call",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        3100,
        100
      ],
      "credentials": {
        "twilioApi": {
          "id": "{{your-twilio-credential-id}}",
          "name": "Twilio API Credentials"
        }
      }
    },
    {
      "parameters": {
        "authentication": "twilioApi",
        "operation": "forward",
        "callSid": "{{ $json['CallSid'] }}",
        "to": "{{your-human-number}}",
        "options": {}
      },
      "name": "Transfer Call",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        3100,
        300
      ],
      "credentials": {
        "twilioApi": {
          "id": "{{your-twilio-credential-id}}",
          "name": "Twilio API Credentials"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "event",
        "operation": "create",
        "calendarId": "primary",
        "eventDetails": {
          "summary": "Meeting with {{ $json['CustomerName'] || 'there' }}",
          "start": {
            "dateTime": "{{$moment().add(1, 'days').toISOString()}}"
          },
          "end": {
            "dateTime": "{{$moment().add(1, 'days').add(1, 'hour').toISOString()}}"
          },
          "attendees": [
            {
              "email": "{{your-email}}"
            }
          ]
        }
      },
      "name": "Schedule Meeting",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        3100,
        500
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "{{your-google-calendar-credential-id}}",
          "name": "Google Calendar Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { twiml: `<Response><Say voice=\\\"Polly.Matthew\\\">Okay, ${$json['CustomerName'] || 'there'}, letâ€™s keep chatting, um, what else can I help with?</Say><Record action=\\\"https://apex-ai-n8n.onrender.com/webhook/recording/inbound\\\" maxLength=\\\"30\\\" /></Response>`, headers: { \\\"Content-Type\\\": \\\"application/xml\\\" }, statusCode: 200 } }];"
      },
      "name": "Continue Conversation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3100,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "const transcription = $input.first().json.transcript || ''; return [{ json: { isObjection: transcription.includes('expensive') || transcription.includes('cost') || transcription.includes('price') } }];"
      },
      "name": "Detect Objection",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3300,
        700
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "prompts",
        "value": "{{ JSON.stringify([...($node['Fetch Prompts'].json.Prompts || []), { text: $json.ResponseText, scenario: $json.isObjection ? 'price_objection' : 'general', sentiment: $json.Sentiment }]) }}",
        "options": {}
      },
      "name": "Store New Prompt",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3500,
        700
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/text-to-speech/UgBBYS2sOqTuMpoF3BR0",
        "method": "POST",
        "headers": {
          "xi-api-key": "{{your-elevenlabs-api-key}}"
        },
        "body": {
          "text": "{{$json['ResponseText']}}",
          "voice_settings": {
            "stability": 0.7,
            "similarity_boost": 0.7,
            "style": 0.2
          }
        },
        "options": {
          "responseFormat": "binary"
        }
      },
      "name": "ElevenLabs TTS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        3700,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "const audioData = $node['ElevenLabs TTS'].binary.data; const audioUrl = `data:audio/mp3;base64,${audioData}`; return [{ json: { twiml: `<Response><Play>${audioUrl}</Play><Record action=\\\"https://apex-ai-n8n.onrender.com/webhook/recording/inbound\\\" maxLength=\\\"30\\\" /></Response>`, headers: { \\\"Content-Type\\\": \\\"application/xml\\\" }, statusCode: 200 } }];"
      },
      "name": "Generate TwiML Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3900,
        700
      ]
    },
    {
      "parameters": {
        "responseCode": 200,
        "options": {}
      },
      "name": "Send Voice Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        4100,
        700
      ]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "call_history_{{ $json['From'] }}",
        "value": "{{ JSON.stringify($json) }}",
        "options": {}
      },
      "name": "Log Call",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        4300,
        700
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const error = $input.first().error; if (error) { return [{ json: { error: error.message, node: this.getNode().name, timestamp: new Date().toISOString() } }]; } return [];"
      },
      "name": "Catch Errors",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1600,
        1400
      ]
    },
    {
      "parameters": {
        "cronExpression": "0 * * * *"
      },
      "name": "Schedule Outbound Calls",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        100,
        1000
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "sheet",
        "operation": "get",
        "spreadsheetId": "1tmdUg32Qv-fC-SV8D5HmqUsX6KTaS3xuL9n7pB8FqCs",
        "range": "Leads!A2:F",
        "options": {}
      },
      "name": "Fetch Leads",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        300,
        1000
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{your-google-sheets-credential-id}}",
          "name": "Google Sheets Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const leads = $input.all().map(item => item.json); const filtered = leads.filter(lead => lead.Status === 'new' && lead.Phone); return filtered.map(lead => ({ json: lead }));"
      },
      "name": "Filter Leads",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        500,
        1000
      ]
    },
    {
      "parameters": {
        "authentication": "twilioApi",
        "operation": "call",
        "from": "{{your-twilio-number}}",
        "to": "{{ $json['Phone'] }}",
        "url": "https://apex-ai-n8n.onrender.com/webhook/outbound",
        "options": {}
      },
      "name": "Initiate Outbound Call",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        700,
        1000
      ],
      "credentials": {
        "twilioApi": {
          "id": "{{your-twilio-credential-id}}",
          "name": "Twilio API Credentials"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "outbound",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Outbound Call Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        900,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { twiml: `<Response><Say voice=\\\"Polly.Matthew\\\">Hey, um, this is Alex from Apex AI Solutions. Is this a good time to chat, {{ $json['Name'] || 'there' }}?</Say><Record action=\\\"https://apex-ai-n8n.onrender.com/webhook/recording/outbound\\\" maxLength=\\\"30\\\" /></Response>`, headers: { \\\"Content-Type\\\": \\\"application/xml\\\" }, statusCode: 200 } }];"
      },
      "name": "Outbound Greeting",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1100,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "const payload = $input.first().json; return [{ json: { CallSid: payload.CallSid, From: payload.From, To: payload.To, recordingUrl: payload.RecordingUrl } }];"
      },
      "name": "Inspect Outbound Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1300,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "const url = $input.first().json.recordingUrl; if (!url) { throw new Error('Missing recording URL'); } return [{ json: { recordingUrl: url } }];"
      },
      "name": "Validate Recording Outbound",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1500,
        1000
      ]
    },
    {
      "parameters": {
        "url": "https://api.deepgram.com/v1/listen",
        "method": "POST",
        "headers": {
          "Authorization": "Token {{your-deepgram-api-key}}",
          "Content-Type": "application/json"
        },
        "body": {
          "url": "{{ $json['recordingUrl'] }}"
        },
        "queryParameters": {
          "model": "nova-2",
          "smart_format": true,
          "filler_words": true
        },
        "options": {}
      },
      "name": "Deepgram Transcription Outbound",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        1700,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "const response = $input.first().json; const transcript = response.results?.channels[0]?.alternatives[0]?.transcript || ''; return [{ json: { transcript } }];"
      },
      "name": "Parse Deepgram Outbound",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1900,
        1000
      ]
    },
    {
      "parameters": {
        "authentication": "openAiApi",
        "operation": "chat",
        "model": "gpt-4o",
        "messages": [
          {
            "role": "system",
            "content": "Is transcript interested? {{ $json['transcript'] }}. Return JSON: { isInterested: boolean }"
          }
        ],
        "options": {}
      },
      "name": "Check Interest",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        2100,
        1000
      ],
      "credentials": {
        "openAiApi": {
          "id": "{{your-openai-credential-id}}",
          "name": "OpenAI Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isInterested = $input.first().json.isInterested || false; return [{ json: { shouldUpsell: isInterested && Math.random() > 0.7 } }];"
      },
      "name": "Detect Upsell Opportunity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2300,
        1000
      ]
    },
    {
      "parameters": {
        "authentication": "openAiApi",
        "operation": "chat",
        "model": "gpt-4o",
        "messages": [
          {
            "role": "system",
            "content": "Generate follow-up for: {{ $json['transcript'] }}. Interest: {{ $json['isInterested'] }}. Upsell: {{ $json['shouldUpsell'] }}. Name: {{ $json['Name'] || 'there' }}. Use fillers like 'um', 'oh', 'yeah'. Return JSON: { FollowUpText: string }"
          }
        ],
        "options": {}
      },
      "name": "Generate Follow-Up",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        2500,
        1000
      ],
      "credentials": {
        "openAiApi": {
          "id": "{{your-openai-credential-id}}",
          "name": "OpenAI Credentials"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/text-to-speech/UgBBYS2sOqTuMpoF3BR0",
        "method": "POST",
        "headers": {
          "xi-api-key": "{{your-elevenlabs-api-key}}"
        },
        "body": {
          "text": "{{$json['FollowUpText']}}",
          "voice_settings": {
            "stability": 0.7,
            "similarity_boost": 0.7,
            "style": 0.2
          }
        },
        "options": {
          "responseFormat": "binary"
        }
      },
      "name": "ElevenLabs TTS Outbound",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        2700,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "const audioData = $node['ElevenLabs TTS Outbound'].binary.data; const audioUrl = `data:audio/mp3;base64,${audioData}`; return [{ json: { twiml: `<Response><Play>${audioUrl}</Play><Record action=\\\"https://apex-ai-n8n.onrender.com/webhook/recording/outbound\\\" maxLength=\\\"30\\\" /></Response>`, headers: { \\\"Content-Type\\\": \\\"application/xml\\\" }, statusCode: 200 } }];"
      },
      "name": "Generate TwiML Follow-Up",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        2900,
        1000
      ]
    },
    {
      "parameters": {
        "responseCode": 200,
        "options": {}
      },
      "name": "Send Follow-Up",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        3100,
        1000
      ]
    },
    {
      "parameters": {
        "authentication": "twilioApi",
        "operation": "voiceResponse",
        "voice": "Polly.Matthew",
        "message": "Hey, this is Alex from Apex AI Solutions. I'll follow up soon, okay?",
        "options": {}
      },
      "name": "Leave Voicemail",
      "type": "n8n-nodes-base.twilio",
      "typeVersion": 1,
      "position": [
        3500,
        1000
      ],
      "credentials": {
        "twilioApi": {
          "id": "{{your-twilio-credential-id}}",
          "name": "Twilio API Credentials"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "sheet",
        "operation": "append",
        "spreadsheetId": "1tmdUg32Qv-fC-SV8D5HmqUsX6KTaS3xuL9n7pB8FqCs",
        "range": "Sheet2!A:C",
        "options": {}
      },
      "name": "Log Outcome",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        3700,
        1000
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{your-google-sheets-credential-id}}",
          "name": "Google Sheets Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isInterested = $input.first().json.isInterested || false; return [{ json: { isSuccessful: isInterested } }];"
      },
      "name": "Update Success Rate Outbound",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        3300,
        1000
      ]
    },
    {
      "parameters": {
        "authentication": "openAiApi",
        "operation": "chat",
        "model": "gpt-4o",
        "messages": [
          {
            "role": "system",
            "content": "Generate 100 prompts for scenarios: new_customer, returning_customer, price_objection, positive_sentiment, negative_sentiment. Include human-like fillers."
          }
        ],
        "options": {}
      },
      "name": "Generate Prompts",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        100,
        1400
      ],
      "credentials": {
        "openAiApi": {
          "id": "{{your-openai-credential-id}}",
          "name": "OpenAI Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "prompts",
        "value": "{{ $json['Prompts'] }}",
        "options": {}
      },
      "name": "Store Prompts",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        300,
        1400
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "aggregate",
        "key": "call_history_*",
        "aggregation": "avg",
        "valueProperty": "{{ $json.isSuccessful ? 1 : 0 }}",
        "options": {}
      },
      "name": "Calculate Success Rate",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        500,
        1400
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "authentication": "openAiApi",
        "operation": "chat",
        "model": "gpt-4o",
        "messages": [
          {
            "role": "system",
            "content": "Optimize prompts based on success rate: {{ $json['successRate'] }}. Keep human-like cadence."
          }
        ],
        "options": {}
      },
      "name": "Optimize Prompts",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        700,
        1400
      ],
      "credentials": {
        "openAiApi": {
          "id": "{{your-openai-credential-id}}",
          "name": "OpenAI Credentials"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "prompts",
        "value": "{{ $json['OptimizedPrompts'] }}",
        "options": {}
      },
      "name": "Store Optimized Prompts",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        900,
        1400
      ],
      "credentials": {
        "redis": {
          "id": "{{your-redis-credential-id}}",
          "name": "Redis Credentials"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "{{$json['successRate']}}",
              "operation": "less",
              "value2": 0.8
            }
          ]
        }
      },
      "name": "Performance Alert",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1100,
        1400
      ]
    },
    {
      "parameters": {
        "to": "alerts@apexaisolutions.com",
        "subject": "Performance Alert",
        "text": "Success rate: {{ $json['successRate'] }}. Please review."
      },
      "name": "Send Alert Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1300,
        1400
      ],
      "credentials": {
        "smtp": {
          "id": "{{your-smtp-credential-id}}",
          "name": "Email Credentials"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "sheet",
        "operation": "append",
        "spreadsheetId": "1tmdUg32Qv-fC-SV8D5HmqUsX6KTaS3xuL9n7pB8FqCs",
        "range": "Metrics!A:B",
        "options": {}
      },
      "name": "Record Metrics",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 1,
      "position": [
        1500,
        1400
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "{{your-google-sheets-credential-id}}",
          "name": "Google Sheets Credentials"
        }
      }
    },
    {
      "parameters": {
        "to": "debug@apexaisolutions.com",
        "subject": "Workflow Error",
        "text": "Error in {{ $json['node'] }} at {{ $json['timestamp'] }}: {{ $json['error'] }}"
      },
      "name": "Send Debug Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 1,
      "position": [
        1800,
        1400
      ],
      "credentials": {
        "smtp": {
          "id": "{{your-smtp-credential-id}}",
          "name": "Email Credentials"
        }
      }
    }
  ],
  "connections": {
    "Twilio Voice Webhook": {
      "main": [
        [
          {
            "node": "Initial Greeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initial Greeting": {
      "main": [
        [
          {
            "node": "Inbound Recording Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inbound Recording Webhook": {
      "main": [
        [
          {
            "node": "Inspect Twilio Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inspect Twilio Payload": {
      "main": [
        [
          {
            "node": "Fetch Customer Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Customer Data": {
      "main": [
        [
          {
            "node": "Check Call History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Call History": {
      "main": [
        [
          {
            "node": "Fetch Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Prompts": {
      "main": [
        [
          {
            "node": "Check for Existing Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Existing Response": {
      "main": [
        [
          {
            "node": "Use GPT?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Use GPT?": {
      "main": [
        [
          {
            "node": "Validate Recording",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Static Playback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Static Playback": {
      "main": [
        [
          {
            "node": "Send Voice Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Recording": {
      "main": [
        [
          {
            "node": "Deepgram Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deepgram Transcription": {
      "main": [
        [
          {
            "node": "Parse Deepgram",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Deepgram": {
      "main": [
        [
          {
            "node": "Generate Combined Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Combined Response": {
      "main": [
        [
          {
            "node": "Parse AI Outputs",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Outputs": {
      "main": [
        [
          {
            "node": "Route by Intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Intent": {
      "main": [
        [
          {
            "node": "End Call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transfer Call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Schedule Meeting",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Continue Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "End Call": {
      "main": [
        [
          {
            "node": "Log Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transfer Call": {
      "main": [
        [
          {
            "node": "Log Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Meeting": {
      "main": [
        [
          {
            "node": "Log Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Continue Conversation": {
      "main": [
        [
          {
            "node": "Detect Objection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Objection": {
      "main": [
        [
          {
            "node": "Store New Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store New Prompt": {
      "main": [
        [
          {
            "node": "ElevenLabs TTS",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ElevenLabs TTS": {
      "main": [
        [
          {
            "node": "Generate TwiML Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate TwiML Response": {
      "main": [
        [
          {
            "node": "Send Voice Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Voice Response": {
      "main": [
        [
          {
            "node": "Log Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Call": {
      "main": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Catch Errors": {
      "main": [
        [
          {
            "node": "Send Debug Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outbound Recording Webhook": {
      "main": [
        [
          {
            "node": "Inspect Outbound Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Outbound Calls": {
      "main": [
        [
          {
            "node": "Fetch Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Leads": {
      "main": [
        [
          {
            "node": "Filter Leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Leads": {
      "main": [
        [
          {
            "node": "Initiate Outbound Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initiate Outbound Call": {
      "main": [
        [
          {
            "node": "Outbound Call Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outbound Call Webhook": {
      "main": [
        [
          {
            "node": "Outbound Greeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outbound Greeting": {
      "main": [
        [
          {
            "node": "Outbound Recording Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inspect Outbound Payload": {
      "main": [
        [
          {
            "node": "Validate Recording Outbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Recording Outbound": {
      "main": [
        [
          {
            "node": "Deepgram Transcription Outbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deepgram Transcription Outbound": {
      "main": [
        [
          {
            "node": "Parse Deepgram Outbound",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Deepgram Outbound": {
      "main": [
        [
          {
            "node": "Check Interest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Interest": {
      "main": [
        [
          {
            "node": "Detect Upsell Opportunity",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect Upsell Opportunity": {
      "main": [
        [
          {
            "node": "Generate Follow-Up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Follow-Up": {
      "main": [
        [
          {
            "node": "ElevenLabs TTS Outbound",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ElevenLabs TTS Outbound": {
      "main": [
        [
          {
            "node": "Generate TwiML Follow-Up",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate TwiML Follow-Up": {
      "main": [
        [
          {
            "node": "Send Follow-Up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Follow-Up": {
      "main": [
        [
          {
            "node": "Log Call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Leave Voicemail": {
      "main": [
        [
          {
            "node": "Log Outcome",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Outcome": {
      "main": [
        [
          {
            "node": "Update Success Rate Outbound",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Success Rate Outbound": {
      "main": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Prompts": {
      "main": [
        [
          {
            "node": "Store Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Prompts": {
      "main": [
        [
          {
            "node": "Calculate Success Rate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Success Rate": {
      "main": [
        [
          {
            "node": "Optimize Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Optimize Prompts": {
      "main": [
        [
          {
            "node": "Store Optimized Prompts",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Optimized Prompts": {
      "main": [
        [
          {
            "node": "Performance Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Performance Alert": {
      "main": [
        [
          {
            "node": "Send Alert Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Record Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Alert Email": {
      "main": [
        [
          {
            "node": "Record Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Record Metrics": {
      "main": [
        [
          {
            "node": "Catch Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}